from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


def inline_yes_or_no() -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"
    :return: (markup_inline) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    markup_inline = InlineKeyboardMarkup()
    item_yes = InlineKeyboardButton(text='–ï—â—ë', callback_data='y')
    item_no = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='stop')
    markup_inline.add(item_yes, item_no)
    return markup_inline


def inline_operation() -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ó–∞–∫—É–ø–∫–∞" –∏–ª–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    :return: (markup_inline) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    markup_inline = InlineKeyboardMarkup()
    item_shop = InlineKeyboardButton(text='–ó–∞–∫—É–ø–∫–∞', callback_data='shop')
    item_edit = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='edit')

    markup_inline.add(item_shop, item_edit)
    return markup_inline


def inline_lists(lists: dict) -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    :param lists:
    :return: (markup_inline) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    markup_inline = InlineKeyboardMarkup()
    buttons = []

    for list_id, values in lists.items():
        name = str(values['name'])
        date = str(values['date'])
        list_status = str(values['list_status'])

        button_text = f"{list_status}{date}: {name}"
        # button_text = f"{list_id}|{str(values['date'])}"
        callback_data = f"{list_id}|{date}|{name}"

        markup_inline.add(InlineKeyboardButton(text=button_text, callback_data=callback_data), )

    #     buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
    #
    # for i in range(0, len(buttons), 2):
    #     if i + 1 < len(buttons):
    #         markup_inline.row(buttons[i], buttons[i + 1])
    #     else:
    #         markup_inline.row(buttons[i])

    return markup_inline


def inline_products(kb_type: str, products: dict) -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ id —Å–ø–∏—Å–∫–∞
    :param kb_type: 
    :param products:
    :return: (markup_inline) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    markup_inline = InlineKeyboardMarkup()
    for product_id, values in products.items():
        mark = '‚ñ´Ô∏è'
        if values['status']:
            mark = '‚úÖ '
        button_text = mark + str(values['product_name'])
        markup_inline.add(InlineKeyboardButton(text=button_text, callback_data=product_id), )
    markup_inline.add(InlineKeyboardButton(text='üÜó –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='stop'), )

    if kb_type == 'edit':
        markup_inline.add(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data='del_this_list'), )
    # else:
    #     # share_button = InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query="")
    #     markup_inline.add(InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=""), )
    return markup_inline
